{"version":3,"sources":["components/NewTodoForm.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","formSubmitted","onTodoChanged","newTodo","className","onSubmit","htmlFor","onChange","id","name","value","type","TodoItem","todo","index","toggleTodoDone","removeTodo","event","checked","done","title","onClick","TodoList","todos","map","key","App","state","message","this","setState","target","preventDefault","splice","year","Date","getFullYear","bind","allDone","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.aff8f4a1.chunk.js","sourcesContent":["import React from 'react';\nimport './NewTodoForm.scss';\n\nconst NewTodoForm = ({ formSubmitted, onTodoChanged, newTodo }) => {\n  return (\n    <div className='todoForm'>\n      <form onSubmit={formSubmitted}>\n        <label className='todoForm__label' htmlFor='NewTodo'>\n          TODO\n        </label>\n        <input\n          className='todoForm__input'\n          onChange={onTodoChanged}\n          id='NewTodo'\n          name='NewTodo'\n          value={newTodo}\n        />\n        <button className='btn' type='submit'>\n          Add Todo\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default NewTodoForm;\n","import React from 'react';\nimport './TodoItem.scss';\n\nconst TodoItem = ({ todo, index, toggleTodoDone, removeTodo }) => {\n  return (\n    <li className='item'>\n      <input\n        className='checkbox'\n        type='checkbox'\n        onChange={(event) => toggleTodoDone(event, index)}\n        checked={todo.done}\n      />\n      {/* <span\n        style={{\n          textDecoration: todo.done ? 'line-through' : 'inherit'\n        }}\n      >\n        {todo.title}\n      </span> */}\n      <span className={todo.done ? 'done' : ''}>{todo.title}</span>\n      <button className='btn' onClick={() => removeTodo(index)}>\n        Remove\n      </button>\n    </li>\n  );\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ toggleTodoDone, todos, removeTodo }) => {\n  return (\n    <div>\n      <ul className='list'>\n        {todos.map((todo, index) => {\n          return (\n            <TodoItem\n              index={index}\n              key={index}\n              todo={todo}\n              toggleTodoDone={toggleTodoDone}\n              removeTodo={removeTodo}\n            />\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport NewTodoForm from './components/NewTodoForm';\nimport TodoList from './components/TodoList';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      message: `To-Do List`,\n      newTodo: '',\n      todos: [\n        {\n          title: 'Your todo here!',\n          done: false\n        }\n      ]\n    };\n  }\n\n  onTodoChanged(event) {\n    this.setState({\n      newTodo: event.target.value\n    });\n  }\n\n  formSubmitted(event) {\n    event.preventDefault();\n    this.setState({\n      newTodo: '',\n      todos: [\n        ...this.state.todos,\n        {\n          title: this.state.newTodo,\n          done: false\n        }\n      ]\n    });\n  }\n\n  toggleTodoDone(event, index) {\n    const todos = [...this.state.todos]; // mengkopi array\n    todos[index] = {\n      ...todos[index],\n      done: event.target.checked\n    }; // mengkopi todo item\n\n    this.setState({\n      todos\n    });\n  }\n\n  removeTodo(index) {\n    const todos = [...this.state.todos];\n    todos.splice(index, 1);\n\n    this.setState({\n      todos\n    });\n  }\n\n  allDone() {\n    const todos = this.state.todos.map((todo) => {\n      return {\n        title: todo.title,\n        done: true\n      };\n    });\n\n    this.setState({\n      todos\n    });\n  }\n\n  render() {\n    const year = new Date().getFullYear();\n    return (\n      <div className='container'>\n        <div className='todo'>\n          <h2 className='todo__header'>{this.state.message}</h2>\n          <NewTodoForm\n            newTodo={this.state.newTodo}\n            onTodoChanged={this.onTodoChanged.bind(this)}\n            formSubmitted={this.formSubmitted.bind(this)}\n          />\n          <TodoList\n            todos={this.state.todos}\n            toggleTodoDone={this.toggleTodoDone.bind(this)}\n            removeTodo={this.removeTodo.bind(this)}\n          />\n          <button className='btn' onClick={() => this.allDone()}>\n            All done\n          </button>\n          {/* footer */}\n          <footer className='footer'>\n            build with &hearts; by ubay &copy;{year}\n          </footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}